# -*- coding: utf-8 -*-
"""M6_Ex02_bike_accident.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hD3SzQuMwMNVXfHPO4tct8IfY1LWTs3N

## Analyzing and visualizing big data using Polars DataFrame

### We used the dataset, 'Bicycle Accidents in Great Britain' (1979 to 2018).

- Accidents.csv (72.28MB)
- Bikers.csv (29.38MB)

### 01. Data preprocessing
"""

# installing 
!pip install polars --q
!pip install plotly

# importing the necessary lib
import polars as pl
# EDA
import matplotlib.pyplot as plt
import plotly.express as px
import seaborn as sns

df_acc = pl.read_csv('Accidents.csv')

df_bike = pl.read_csv('Bikers.csv')

df_bike.head()

df_acc.head()

rowCount = df_acc.shape[0]
print("Total number of rows in the df_acc:", rowCount)

rowCount_bike = df_bike.shape[0]
print("Total number of rows in the df_bike:", rowCount_bike)

"""### 02. Data inner join"""

# inner join with two files, df and df_bike
df_total = df_acc.join(df_bike, on="Accident_Index", how="inner")
print(df_total)

# drop the nan data
null_count_df = df_total.null_count()
print(null_count_df)

df_total = df_total.drop_nulls()

# check!
null_count_df = df_total.null_count()
print(null_count_df)

df_total.columns

# preprocessed data
df_total.head()

"""### 03. Data unique values check."""

uniqueRoad_conditions = df_total['Road_conditions'].unique()
print("Number of unique values in the 'Road_conditions' column:", uniqueRoad_conditions)

# Weather_conditions
unique_wconditions = df_total['Weather_conditions'].unique()
print("Number of unique values in the 'Weather_conditions' column:", unique_wconditions)

# Light_conditions
unique_Lconditions = df_total['Light_conditions'].unique()
print("Number of unique values in the 'Light_conditions' column:", unique_Lconditions)

unique_age = df_total['Age_Grp'].unique()
print("Number of unique values in the 'Age_Grp' column:", unique_age)

"""### 04. Aggregate the data

We use some functions such as filter(), select(), groupby(), mean, median etc.

We found out the accident by ['Speed_limit',
  'Road_conditions',
  'Weather_conditions',
  'Road_type',
  'Light_conditions',
  'Gender',
  'Age_Grp']
"""

# Unexpectedly, we found that most accidents occur when the speed is 30.
Accident_by_Speedlimit = df_total.groupby('Speed_limit').agg(pl.col('Accident_Index').count().alias('the number of accident by Speedlimit')).sort(by='the number of accident by Speedlimit', reverse=True).head(5)
Accident_by_Speedlimit

Accident_by_Road_conditions = df_total.groupby('Road_conditions').agg(pl.col('Accident_Index').count().alias('the number of accident by Road_conditions')).sort(by='the number of accident by Road_conditions', reverse=True).head(5)
Accident_by_Road_conditions

Accident_by_Weather_conditions = df_total.groupby('Weather_conditions').agg(pl.col('Accident_Index').count().alias('the number of accident by Weather_conditions')).sort(by='the number of accident by Weather_conditions', reverse=True).head(5)
Accident_by_Weather_conditions

Accident_by_Road_type = df_total.groupby('Road_type').agg(pl.col('Accident_Index').count().alias('the number of accident by Road_type')).sort(by='the number of accident by Road_type', reverse=True).head(5)
Accident_by_Road_type

Accident_by_Light_conditions = df_total.groupby('Light_conditions').agg(pl.col('Accident_Index').count().alias('the number of accident by Light_conditions')).sort(by='the number of accident by Light_conditions', reverse=True).head(5)
Accident_by_Light_conditions

Accident_by_Gender = df_total.groupby('Gender').agg(pl.col('Accident_Index').count().alias('the number of accident by Gender')).sort(by='the number of accident by Gender', reverse=True).head(5)
Accident_by_Gender

Accident_by_Age_Grp = df_total.groupby('Age_Grp').agg(pl.col('Accident_Index').count().alias('the number of accident by Age_Grp')).sort(by='the number of accident by Age_Grp', reverse=True).head(10)
Accident_by_Age_Grp

# Severity
Accident_by_Severity = df_total.groupby('Severity').agg(pl.col('Accident_Index').count().alias('Accident by Severity')).sort(by='Accident by Severity', reverse=True).head(5)
Accident_by_Severity

"""### 05. Which age group is the most dangerous in bike accidents?"""

# let's look into the "Serious" accidents using filter.
# we found out about 30% of the serious accident is the 11 to 15 age group.
serious_df = df_total.filter((pl.col('Severity') == 'Serious') & (pl.col('Age_Grp') == "11 to 15"))
print(serious_df)

"""### 06. Analysis using date column"""

df_total = df_total.with_column(pl.col('Date').str.strptime(pl.Date, strict=False))
df_total.with_column(pl.col('Date').dt.year().alias('year')).groupby('year').agg(pl.col('Accident_Index').count())

df_total.with_column(pl.col('Date').dt.month().alias('month')).groupby('month').agg(pl.col('Accident_Index').count())

Accident_by_day_gender = df_total.groupby(['Day','Gender']).agg(pl.col('Accident_Index').count()).sort(by='Accident_Index', reverse=True)
Accident_by_day_gender

"""### 07. EDA(Visualization)

We tried to make various charts with analyzed data. 
"""

import matplotlib.pyplot as plt
plt.bar(Accident_by_Speedlimit['Speed_limit'],Accident_by_Speedlimit['the number of accident by Speedlimit'])

px.pie(Accident_by_Speedlimit,                                   # Polars DataFrame
       names = Accident_by_Speedlimit.select('Speed_limit').to_series(),
       values = Accident_by_Speedlimit.select('the number of accident by Speedlimit').to_series(), 
       hover_name = Accident_by_Speedlimit.select('Speed_limit').to_series(),
       color_discrete_sequence= px.colors.sequential.Plasma_r)

df = Accident_by_Road_conditions
px.line(df.to_pandas(),               # covert to Pandas DataFrame
        x = 'Road_conditions', 
        y = 'the number of accident by Road_conditions'
)

df = Accident_by_day_gender

plt.bar(df['Day'], df['Accident_Index'])

import seaborn as sns
sns.set_theme(style="ticks")

sns.pairplot(df_total.to_pandas(), hue='Severity')